"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8024],{38024:(e,r,t)=>{t.d(r,{NodeCache:()=>s});let a=async(e,r,t,a)=>{let s=e.split(t.sep).filter(Boolean),i=s[s.length-1],c=s[0],o=e;r.existsSync(t.join(t.sep,c))||(o=t.join(a.tmpdir(),i));try{r.mkdirSync(o,{recursive:!0})}catch(e){throw Error(`Failed to create cache directory: ${e.message}`)}return o},s=async e=>{let r=require("node:fs"),t=require("node:path"),s=require("node:os"),{createHash:i}=require("node:crypto"),c=await a(e,r,t,s);return{makeKey:e=>{let r=e&&e instanceof Object?JSON.stringify(e):e||"";return i("sha256").update(r).digest("hex")},get:async e=>{let t,a=`${c}/${e}`;try{let e=await r.promises.readFile(a,"utf-8");t=JSON.parse(e)}catch(e){"ENOENT"!==e.code&&console.error(`Failed to read cache file to ${a}: ${e.message}`)}return t},set:async(e,t)=>{let a=`${c}/${e}`;try{await r.promises.writeFile(a,JSON.stringify(t),{encoding:"utf-8",flag:"wx"})}catch(e){"EEXIST"!==e.code&&console.error(`Failed to write cache file to ${a}: ${e.message}`)}}}}}}]);